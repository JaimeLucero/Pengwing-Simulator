/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.example;

import java.io.File;
import java.io.IOException;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author jaimelucero
 */
public class Simulator extends javax.swing.JFrame {

    /**
     * Creates new form SImulator
     */
    public static SimulatorPanel sp;

    public Simulator() {
        initComponents();
        playMusicLoop();
        SwingUtilities.invokeLater(() -> {
            initQueue(sp);
        });
    }

    public void initQueue(SimulatorPanel sp){
        QueueController cc = new QueueController(sp);
        cc.generateQueue();
        Thread altThread1 = new Thread(() -> { //runs a separate thread to queue priority customers first
            try {
                cc.priorityWindow();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        });

        Thread altThread2 = new Thread(() -> { //runs a separate thread to queue customers assigned to window 2
            try {
                cc.processWindow2();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        });

        Thread altThread3 = new Thread(() -> { //runs a separate thread to queue customers assigned to window 3
            try {
                cc.processWindow3();
            } catch (InterruptedException e) {
            }
        });

        Thread altThread4 = new Thread(() -> { //runs a separate thread to check if all windows are done queueing
            cc.checkQueue(this);
        });

        altThread1.start();
        altThread2.start();
        altThread3.start();
        altThread4.start();
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        sp = new SimulatorPanel();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        setTitle("Pengwing Simulator | Queueing");
        setIconImage(new ImageIcon((getClass().getResource("/Elements/penguin.png"))).getImage());
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));
        jPanel1.setLayout(null);
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("About");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Menu");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);
        add(sp);
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) { //opens the program about message
        JOptionPane.showMessageDialog(null, getAbout(), "Penguing Simulator | About",  JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) { //opens a confirm message if the user want to go back to the main menu
        int choice = JOptionPane.showConfirmDialog(null, "Queue still ongoing. :( \nDo you want to go to main menu?\nChoosing No or closing the dialog will exit this dialog.", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            // User chose "Yes"
            System.out.println("You chose Yes.");
            stopMusic();
            dispose();
            try {
                MainMenu.main(null);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
            }
        } else {
            // User chose "No" or closed the dialog
            System.out.println("You chose No or closed the dialog.");
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2MouseClicked


    public void playMusicLoop() { // loops the music for the simulator
        try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("./src/main/resources/Music/sim_sfx.wav"));
            simMusic = AudioSystem.getClip();
            simMusic.open(audioInputStream);
            simMusic.loop(Clip.LOOP_CONTINUOUSLY); // Play in a loop
            simMusic.start();
        } catch (LineUnavailableException | IOException | UnsupportedAudioFileException e) {
            e.printStackTrace();
        }
    }

    public void stopMusic() { //stops the music
        if (simMusic != null) {
            simMusic.stop();
            simMusic.close();
        }
    }


    public String getAbout(){ //program about message
        String aboutText = "About:\n" +
        "The \"Penguin Queue Simulator\" is a delightful and engaging program designed to simulate a queue of adorable penguins waiting to access three \n  different windows for various services. What sets this simulation apart is the inclusion of a special priority queue for penguins that have an unmistakable style - red shoes!\n" +
        "\n" +
        "Key Features:\n" +
        "\n" +
        "Three Service Windows: The program presents a queue of charming penguins, each waiting their turn to be served at the specific windows assigned to them. \n    These windows represent distinct services, making the simulation more interactive and fun.\n" +
        "\n" +
        "Priority Queue: Among the penguins patiently awaiting their turn, there's a unique twist. Some penguins sport eye-catching red shoes, and they get special treatment. \n   The program maintains a separate priority queue for these fashionable penguins which is located at the right side of the area, ensuring they receive expedited service.\n" +
        "\n" +
        "Adorable Penguin Characters: The penguins featured in the simulation are full of character and charm. Watch as they waddle and wait their turn, \n     making the entire experience delightful for users of all ages.\n" +
        "\n" +
        "Interactive and Educational: The Penguin Queue Simulator is not just about fun but also provides an educational experience. It introduces users, \n    especially children, to the concepts of queues and prioritization in a playful and engaging manner.\n" +
        "\n" +
        "Visual Appeal: The program's user interface is designed to be visually appealing, with colorful graphics and animations that bring \n      the penguin characters to life."+
        "\n\n\n" +
        "Created by; Jaime Emanuel B. Lucero BSCS-2A USeP CIC";
            return aboutText;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulator().setVisible(true);
            }
        });
    }


    private Clip simMusic;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
